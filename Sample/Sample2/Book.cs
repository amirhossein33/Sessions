namespace SOLID.Sample2
{
    //مدل دوره آموزشی
    public class Course
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public decimal Price { get; set; }
    }
    //SRP این کلاس فقط مدیریت دوره‌ها را برعهده دارد
    public class CourseRepository
    {
        private List<Course> courses = new List<Course>()
        {
          new() {Id = 1 , Name = "C# Fundamental" , Price=100} ,

          new() {Id = 2 , Name = "Asp.net Core Deep Dive" , Price=120} ,

          new() {Id = 3 , Name = "Sql Server For Beginers" , Price=150}

        };
        public List<Course> GetCourses() => courses;
    }

    //SRP  این کلاس مخصوص مدیریت سبد خرید دوره‌ها است
    public class LearningCart
    {
        private List<Course> cart = new List<Course>();
        public void AddToCart(Course course)
        {
            cart.Add(course);
            Console.WriteLine($"Course '{course.Name}' added to cart");
        }
        public List<Course> GetCart() => cart;
    }
    //OCP : روش‌های پرداخت بدون تغییر کلاس موجود اضافه می‌شوند
    public interface IPayment
    {
        public void PaymentProcess(decimal Amount);
    }
    public class StripePayment : IPayment
    {
        public void PaymentProcess(decimal amount)
        {
            Console.WriteLine($"Pay {amount} By Stripe");
        }
    }
    public class PayPalPayment : IPayment
    {
        public void PaymentProcess(decimal amount)
        {
            Console.WriteLine($"Pay {amount} By PayPal");
        }
    }
    //LSP تمام زیر کلاس‌های CourseRepository جایگزین کلاس والد می‌شوند
    public class DiscountCourseRepository : CourseRepository
    {
        public List<Course> GetDiscountedCourses()
        {
            var courses = GetCourses();
            courses.ForEach(course => course.Price *= 0.9m); //10 درصد تخفیف
            return courses;
        }
    }

    // 4. ISP: واسط‌های جداگانه برای عملیات پرداخت و گزارش‌گیری.
    public interface IReportGenerator
    {
        void GenerateReport(List<Course> courses);
    }

    public class PdfReportGenerator : IReportGenerator
    {
        public void GenerateReport(List<Course> courses)
        {
            Console.WriteLine("\nPDF Report:");
            foreach (var course in courses)
            {
                Console.WriteLine($"- {course.Name}: ${course.Price}");
            }
        }
    }

    public class ExcelReportGenerator : IReportGenerator
    {
        public void GenerateReport(List<Course> courses)
        {
            Console.WriteLine("\nExcel Report:");
            foreach (var course in courses)
            {
                Console.WriteLine($"- {course.Name}: ${course.Price}");
            }
        }
    }


    // واسط برای عملیات عمومی کاربران
    public interface IUser
    {
        void RegisterUser();
        void Login();
    }

    // واسط برای عملیات مدرسین
    public interface IInstructor
    {
        void CreateCourse();
    }

    // واسط برای عملیات ادمین‌ها
    public interface IAdmin
    {
        void GenerateSalesReport();
    }


    // کاربران عادی
    public class Student : IUser
    {
        public void RegisterUser()
        {
            Console.WriteLine("Student registered.");
        }

        public void Login()
        {
            Console.WriteLine("Student logged in.");
        }
    }

    // مدرسین
    public class Instructor : IUser, IInstructor
    {
        public void RegisterUser()
        {
            Console.WriteLine("Instructor registered.");
        }

        public void Login()
        {
            Console.WriteLine("Instructor logged in.");
        }

        public void CreateCourse()
        {
            Console.WriteLine("Course created by instructor.");
        }
    }

    // ادمین‌ها
    public class Admin : IUser, IAdmin
    {
        public void RegisterUser()
        {
            Console.WriteLine("Admin registered.");
        }

        public void Login()
        {
            Console.WriteLine("Admin logged in.");
        }

        public void GenerateSalesReport()
        {
            Console.WriteLine("Sales report generated by admin.");
        }
    }

    // 5. DIP: وابستگی از طریق واسط‌ها مدیریت می‌شود.
    public class Checkout
    {
        private readonly IPayment _payment;

        public Checkout(IPayment payment)
        {
            _payment = payment;
        }

        public void CompletePayment(decimal amount)
        {
            _payment.PaymentProcess(amount);
        }
    }

    // برنامه اصلی
    class Program
    {
        static void Main(string[] args)
        {
            // SRP: استفاده از CourseRepository برای نمایش لیست دوره‌ها
            var courseRepository = new CourseRepository();
            var courses = courseRepository.GetCourses();

            Console.WriteLine("Available Courses:");
            foreach (var course in courses)
            {
                Console.WriteLine($"{course.Id}. {course.Name} - ${course.Price}");
            }

            // SRP: مدیریت سبد خرید
            var cart = new LearningCart();
            cart.AddToCart(courses[0]);
            cart.AddToCart(courses[1]);

            // OCP: انتخاب روش پرداخت
            Console.WriteLine("\nChoose Payment : 1 for Stripe, 2 for PayPal");
            int choice = int.Parse(Console.ReadLine());
            IPayment paymentMethod = choice == 1 ? new StripePayment() : (IPayment)new PayPalPayment();

            var checkout = new Checkout(paymentMethod);

            // محاسبه قیمت کل
            decimal totalAmount = 0;
            foreach (var course in cart.GetCart())
            {
                totalAmount += course.Price;
            }

            Console.WriteLine($"\nTotal Amount: ${totalAmount}");
            checkout.CompletePayment(totalAmount);

            // ISP: گزارش‌گیری
            Console.WriteLine("\nChoose Report Type: 1 for PDF, 2 for Excel");
            int reportChoice = int.Parse(Console.ReadLine());
            IReportGenerator reportGenerator = reportChoice == 1 ? new PdfReportGenerator() : (IReportGenerator)new ExcelReportGenerator();
            reportGenerator.GenerateReport(cart.GetCart());
        }
    }
}
